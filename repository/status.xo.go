// Package repository contains the types for schema ''.
package repository

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"
	"time"
)

// Status represents a row from 'status'.
type Status struct {
	ID       int64         `json:"id"`        // id
	Code     string        `json:"code"`      // code
	Name     string        `json:"name"`      // name
	CreateAt time.Time     `json:"create_at"` // create_at
	UpdateAt time.Time     `json:"update_at"` // update_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Status exists in the database.
func (s *Status) Exists() bool {
	return s._exists
}

// Deleted provides information if the Status has been deleted from the database.
func (s *Status) Deleted() bool {
	return s._deleted
}

// Insert inserts the Status to the database.
func (s *Status) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if s._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO status (` +
		`code, name` +
		`) VALUES (` +
		`?, ?` +
		`)`

	// run query
	XOLog(sqlstr, s.Code, s.Name, s.CreateAt, s.UpdateAt)
	res, err := db.Exec(sqlstr, s.Code, s.Name)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	s.ID = id
	s._exists = true

	return nil
}

// Update updates the Status in the database.
func (s *Status) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !s._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if s._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE status SET ` +
		`code = ?, name = ?, update_at = (DATETIME('now','localtime'))` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, s.Code, s.Name, s.CreateAt, s.UpdateAt, s.ID)
	_, err = db.Exec(sqlstr, s.Code, s.Name, s.ID)
	return err
}

// Save saves the Status to the database.
func (s *Status) Save(db XODB) error {
	if s.Exists() {
		return s.Update(db)
	}

	return s.Insert(db)
}

// Delete deletes the Status from the database.
func (s *Status) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !s._exists {
		return nil
	}

	// if deleted, bail
	if s._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM status WHERE id = ?`

	// run query
	XOLog(sqlstr, s.ID)
	_, err = db.Exec(sqlstr, s.ID)
	if err != nil {
		return err
	}

	// set deleted
	s._deleted = true

	return nil
}

// StatusByCode retrieves a row from 'status' as a Status.
//
// Generated from index 'sqlite_autoindex_status_1'.
func StatusByCode(db XODB, code string) (*Status, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, code, name, create_at, update_at ` +
		`FROM status ` +
		`WHERE code = ?`

	// run query
	XOLog(sqlstr, code)
	s := Status{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, code).Scan(&s.ID, &s.Code, &s.Name, &s.CreateAt, &s.UpdateAt)
	if err != nil {
		return nil, err
	}

	return &s, nil
}

// StatusByID retrieves a row from 'status' as a Status.
//
// Generated from index 'status_id_pkey'.
func StatusByID(db XODB, id int64) (*Status, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, code, name, create_at, update_at ` +
		`FROM status ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	s := Status{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&s.ID, &s.Code, &s.Name, &s.CreateAt, &s.UpdateAt)
	if err != nil {
		return nil, err
	}

	return &s, nil
}
