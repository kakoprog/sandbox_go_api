// Package repository contains the types for schema ''.
package repository

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// Task represents a row from 'task'.
type Task struct {
	ID       int64          `json:"id"`        // id
	Name     string         `json:"name"`      // name
	Comment  sql.NullString `json:"comment"`   // comment
	Status   int            `json:"status"`    // status
	CreateAt time.Time      `json:"create_at"` // create_at
	UpdateAt time.Time      `json:"update_at"` // update_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Task exists in the database.
func (t *Task) Exists() bool {
	return t._exists
}

// Deleted provides information if the Task has been deleted from the database.
func (t *Task) Deleted() bool {
	return t._deleted
}

// Insert inserts the Task to the database.
func (t *Task) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if t._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO task (` +
		`name, comment, status` +
		`) VALUES (` +
		`?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, t.Name, t.Comment, t.Status, t.CreateAt, t.UpdateAt)
	res, err := db.Exec(sqlstr, t.Name, t.Comment, t.Status)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	t.ID = id
	t._exists = true

	return nil
}

// Update updates the Task in the database.
func (t *Task) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !t._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if t._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE task SET ` +
		`name = ?, comment = ?, status = ?, update_at = (DATETIME('now','localtime'))` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, t.Name, t.Comment, t.Status, t.CreateAt, t.UpdateAt, t.ID)
	_, err = db.Exec(sqlstr, t.Name, t.Comment, t.Status, t.ID)
	return err
}

// Save saves the Task to the database.
func (t *Task) Save(db XODB) error {
	if t.Exists() {
		return t.Update(db)
	}

	return t.Insert(db)
}

// Delete deletes the Task from the database.
func (t *Task) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !t._exists {
		return nil
	}

	// if deleted, bail
	if t._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM task WHERE id = ?`

	// run query
	XOLog(sqlstr, t.ID)
	_, err = db.Exec(sqlstr, t.ID)
	if err != nil {
		return err
	}

	// set deleted
	t._deleted = true

	return nil
}

func Tasks(db XODB) ([]*Task, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, comment, status, create_at, update_at ` +
		`FROM task `

	// run query
	XOLog(sqlstr)
	q, err := db.Query(sqlstr)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Task{}
	for q.Next() {
		t := Task{
			_exists: true,
		}

		// scan
		err = q.Scan(&t.ID, &t.Name, &t.Comment, &t.Status, &t.CreateAt, &t.UpdateAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &t)
	}

	return res, nil
}

// TasksByCreateAt retrieves a row from 'task' as a Task.
//
// Generated from index 'idx_task_create_at'.
func TasksByCreateAt(db XODB, createAt time.Time) ([]*Task, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, comment, status, create_at, update_at ` +
		`FROM task ` +
		`WHERE create_at = ?`

	// run query
	XOLog(sqlstr, createAt)
	q, err := db.Query(sqlstr, createAt)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Task{}
	for q.Next() {
		t := Task{
			_exists: true,
		}

		// scan
		err = q.Scan(&t.ID, &t.Name, &t.Comment, &t.Status, &t.CreateAt, &t.UpdateAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &t)
	}

	return res, nil
}

// TasksByName retrieves a row from 'task' as a Task.
//
// Generated from index 'idx_task_name'.
func TasksByName(db XODB, name string) ([]*Task, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, comment, status, create_at, update_at ` +
		`FROM task ` +
		`WHERE name = ?`

	// run query
	XOLog(sqlstr, name)
	q, err := db.Query(sqlstr, name)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Task{}
	for q.Next() {
		t := Task{
			_exists: true,
		}

		// scan
		err = q.Scan(&t.ID, &t.Name, &t.Comment, &t.Status, &t.CreateAt, &t.UpdateAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &t)
	}

	return res, nil
}

// TasksByUpdateAt retrieves a row from 'task' as a Task.
//
// Generated from index 'idx_task_update_at'.
func TasksByUpdateAt(db XODB, updateAt time.Time) ([]*Task, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, comment, status, create_at, update_at ` +
		`FROM task ` +
		`WHERE update_at = ?`

	// run query
	XOLog(sqlstr, updateAt)
	q, err := db.Query(sqlstr, updateAt)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Task{}
	for q.Next() {
		t := Task{
			_exists: true,
		}

		// scan
		err = q.Scan(&t.ID, &t.Name, &t.Comment, &t.Status, &t.CreateAt, &t.UpdateAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &t)
	}

	return res, nil
}

// TaskByID retrieves a row from 'task' as a Task.
//
// Generated from index 'task_id_pkey'.
func TaskByID(db XODB, id int64) (*Task, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, comment, status, create_at, update_at ` +
		`FROM task ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	t := Task{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&t.ID, &t.Name, &t.Comment, &t.Status, &t.CreateAt, &t.UpdateAt)
	if err != nil {
		return nil, err
	}

	return &t, nil
}
